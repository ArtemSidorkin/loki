grammar Loki;

//╠ ╣ begin and end for the future

@header
{
package loki.language.parsing;
}


module : (instruction SEMICOLON)+;

instruction : expression;

expression:
	LEFT_PARENTHESIS (BEGIN)? expression (SEMICOLON)? (END)? RIGHT_PARENTHESIS #ExpressionGroup |
	LEFT_BRACKET (BEGIN)? (expression (COMMA expression)*)? (SEMICOLON)? (END)? RIGHT_BRACKET #Array |
	LEFT_BRACE (BEGIN)? (expression COLON expression (COMMA expression COLON expression)*)? (SEMICOLON)? (END)? RIGHT_BRACE (SEMICOLON)? (END)? #Map |

	DOLLAR #Host |

	AT #This |

	CHARACTERS #String |

	FLOAT #Number |
	INT #Number |

	(DOLLAR)? head=(IDENTIFIER | BACKSLASH) LEFT_PARENTHESIS
		(BEGIN)?
			(IDENTIFIER COMMA)* IDENTIFIER (SEMICOLON)?
		(END)?
	RIGHT_PARENTHESIS (inheritance)? COLON instruction
	#Unit |

	(DOLLAR)? head=(IDENTIFIER | BACKSLASH) LEFT_PARENTHESIS
		(BEGIN)?
			(IDENTIFIER COMMA)* IDENTIFIER (SEMICOLON)?
		(END)?
	RIGHT_PARENTHESIS (inheritance)? COLON
		BEGIN
			(instruction SEMICOLON)+
		END
	#Unit |

	(DOLLAR)? head=(IDENTIFIER | BACKSLASH) (IDENTIFIER)* (inheritance)? COLON instruction  #Unit |

	(DOLLAR)? head=(IDENTIFIER | BACKSLASH) (IDENTIFIER)* (inheritance)? COLON
		BEGIN
			(instruction SEMICOLON)+
		END
	#Unit |

	expression DOT IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS #MemberCall |

	expression DOT IDENTIFIER LEFT_PARENTHESIS
		(BEGIN)?
			expression (COMMA expression)* (SEMICOLON)?
		(END)?
	RIGHT_PARENTHESIS
	#MemberCall |

	DOLLAR DOLLAR IDENTIFIER #SuperHostMember |
	DOLLAR IDENTIFIER #HostMember |
	IDENTIFIER #VariableOrParameter |
	expression DOT IDENTIFIER #Member |
	expression LEFT_BRACKET (BEGIN)? (expression (COMMA expression)*)? (SEMICOLON)? (END)? RIGHT_BRACKET #Index |

	expression LEFT_PARENTHESIS RIGHT_PARENTHESIS #Call |

	expression LEFT_PARENTHESIS
		(BEGIN)?
			expression (COMMA expression)* (SEMICOLON)?
		(END)?
	RIGHT_PARENTHESIS
	#Call |

	MINUS expression #UnaryOperation |
	BANG expression #UnaryOperation |

	expression operator=(STAR | SLASH) expression #MulDiv |
	expression operator=(PLUS | MINUS) expression #AddSub |
	expression operator=(EQUALS_EQUALS | BANG_EQUALS) expression #EqNeq |
	expression operator=(GREATER_THAN_EQUALS | LESS_THAN_EQUALS | GREATER_THAN | LESS_THAN) expression #GteLteGtLt |
	expression operator=(AMPERSAND_AMPERSAND | AMPERSAND_AMPERSAND) expression #AmpersandAmpersand |
	expression operator=(PIPE_PIPE | PIPE_PIPE) expression #PipePipe |

	DOLLAR IDENTIFIER EQUALS expression #AssignHostMember |
	DOLLAR IDENTIFIER EQUALS BEGIN expression SEMICOLON END #AssignHostMember |
	IDENTIFIER EQUALS expression #AssignVariable |
	IDENTIFIER EQUALS BEGIN expression SEMICOLON END #AssignVariable |
	expression DOT IDENTIFIER EQUALS expression #AssignMember |
	expression DOT IDENTIFIER EQUALS SEMICOLON BEGIN expression END #AssignMember |
	expression LEFT_BRACKET (BEGIN)? (expression (COMMA expression)*)? (SEMICOLON)? (END)? RIGHT_BRACKET EQUALS expression #AssignIndex |
	expression LEFT_BRACKET (BEGIN)? (expression (COMMA expression)*)? (SEMICOLON)? (END)? RIGHT_BRACKET EQUALS BEGIN expression SEMICOLON END #AssignIndex |

	IF LEFT_PARENTHESIS (BEGIN)? expression (SEMICOLON)? (END)? RIGHT_PARENTHESIS instruction (else_)? #IfElse |
	IF LEFT_PARENTHESIS (BEGIN)? expression (SEMICOLON)? (END)? RIGHT_PARENTHESIS BEGIN (instruction SEMICOLON)+ END (else_)? #IfElse |

	WHILE LEFT_PARENTHESIS (BEGIN)? expression (SEMICOLON)? (END)? RIGHT_PARENTHESIS instruction #While |
	WHILE LEFT_PARENTHESIS (BEGIN)? expression (SEMICOLON)? (END)? RIGHT_PARENTHESIS BEGIN (instruction SEMICOLON)+ END  #While ;

inheritance : LEFT_THIN_ARROW expression | LEFT_THIN_ARROW (expression COMMA)+ expression;

else_ : ELSE BEGIN (instruction SEMICOLON)+ END | ELSE instruction;

BEGIN : '~{';
END : '~}';

IF : 'if';
ELSE : 'else';
WHILE : 'while';
IDENTIFIER : ('_')*('A'..'Z' | 'a'..'z')+('A'..'Z' | 'a'..'z' | '0'..'9' | '_')*;
LEFT_THIN_ARROW : '<-';
DOLLAR : '$';
AT : '@';
CHARACTERS : '"' ( '\\"' | . )*? '"';
FLOAT : ('0'..'9')+'.'('0'..'9')+;
INT : ('0'..'9')+;
PLUS : '+';
MINUS : '-';
STAR : '*';
SLASH : '/';
BACKSLASH : '\\';
EQUALS_EQUALS : '==';
BANG_EQUALS : '!=';
GREATER_THAN_EQUALS : '>=';
GREATER_THAN : '>';
LESS_THAN_EQUALS : '<=';
LESS_THAN : '<';
AMPERSAND_AMPERSAND : '&&';
PIPE_PIPE : '||';
BANG : '!';
AMPERSAND : '&';
PIPE : '|';
EQUALS : '=';
DOT : '.';
COMMA : ',';
COLON : ':';
SEMICOLON : ';';
LEFT_PARENTHESIS : '(';
RIGHT_PARENTHESIS : ')';
LEFT_BRACKET : '[';
RIGHT_BRACKET : ']';
LEFT_BRACE : '{';
RIGHT_BRACE : '}';

SKIP : [ \t\r\n]+ -> skip;