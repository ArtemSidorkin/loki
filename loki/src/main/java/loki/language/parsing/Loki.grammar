grammar Loki;



@header
{
package loki.language.parsing;
}



module : (instruction SEMICOLON)+;



instruction : expression;



expression:

	LEFT_PARENTHESIS expression RIGHT_PARENTHESIS #ExpressionGroup |



	LEFT_BRACKET (expression (COMMA expression)*)? RIGHT_BRACKET #Array |



	LEFT_BRACKET
		((expression RIGHT_THIN_ARROW expression (COMMA expression RIGHT_THIN_ARROW expression)*) | MINUS)
	RIGHT_BRACKET
	#Map |



	LEFT_BRACKET
		((expression RIGHT_THICK_ARROW expression (COMMA expression RIGHT_THICK_ARROW expression)*) | EQUALS)
	RIGHT_BRACKET
	#Object |



	DOLLAR #Host |



	AT #This |



	(CHARACTERS | ACUTE IDENTIFIER) #String |



	FLOAT #Number |



	INT #Number |



	COLON (((member=DOLLAR)? name=IDENTIFIER) | (UNDERSCORE)) (unitParameter)* (inheritance)? #Unit |

	((((((member=DOLLAR)? name=IDENTIFIER) | (UNDERSCORE)) (unitParameter)* (inheritance)? COLON)) | BACKSLASH)
		unitBody
	#Unit |



	expression DOT IDENTIFIER LEFT_PARENTHESIS (expression (COMMA expression)*)? RIGHT_PARENTHESIS #MemberCall |



	DOLLAR DOLLAR IDENTIFIER #SuperHostMember |



	DOLLAR IDENTIFIER #HostMember |



	(IDENTIFIER | UNDERSCORE) #VariableOrParameter |



	expression DOT IDENTIFIER #Member |



	expression LEFT_BRACKET (BEGIN)? expression (SEMICOLON)? (END)? RIGHT_BRACKET #IndexItem |



	expression DOLLAR LEFT_BRACKET ((BEGIN expression SEMICOLON END) | expression) RIGHT_BRACKET #DynamicMember |



	expression LEFT_PARENTHESIS (expression (COMMA expression)*)? RIGHT_PARENTHESIS #Call |



	operator=MINUS expression #UnaryOperation |
	operator=BANG expression #UnaryOperation |



	expression operator=(STAR | SLASH) expression #BinaryOperation |
	expression operator=(PLUS | MINUS) expression #BinaryOperation |
	expression operator=(EQUALS_EQUALS | BANG_EQUALS) expression #BinaryOperation |
	expression operator=(GREATER_THAN_EQUALS | LESS_THAN_EQUALS | GREATER_THAN | LESS_THAN) expression #BinaryOperation |
	expression operator=(AMPERSAND_AMPERSAND | AMPERSAND_AMPERSAND) expression #BinaryOperation |
	expression operator=(PIPE_PIPE | PIPE_PIPE) expression #BinaryOperation |



	DOLLAR IDENTIFIER EQUALS expression #AssignHostMember |



	IDENTIFIER EQUALS expression #AssignVariable |



	expression DOT IDENTIFIER EQUALS expression #AssignMember |



	expression LEFT_BRACKET expression RIGHT_BRACKET EQUALS expression #AssignIndexItem |



	expression DOLLAR LEFT_BRACKET expression RIGHT_BRACKET EQUALS expression #AssignDynamicMember |



	IF expression COLON (instruction | (BEGIN (instruction SEMICOLON)+ END)) (else_)? #IfElse |



	WHILE expression COLON (instruction | (BEGIN (instruction SEMICOLON)+ END)) #While
;



inheritance : DOUBLE_COLON (expression (COMMA expression)*)?;



else_ : ELSE BEGIN (instruction SEMICOLON)+ END | ELSE instruction;



unitParameter: DOLLAR? IDENTIFIER unitDefaultParameterValue?;
unitDefaultParameterValue: EQUALS LEFT_PARENTHESIS expression RIGHT_PARENTHESIS;
unitBody: (instruction | (BEGIN (instruction SEMICOLON)+ END));


BEGIN : LEFT_BRACE;
END : RIGHT_BRACE;



IF : 'if';
ELSE : 'else';
WHILE : 'while';
IDENTIFIER : ('_')*('A'..'Z' | 'a'..'z')+('A'..'Z' | 'a'..'z' | '0'..'9' | '_')*;
UNDERSCORE : '_';
DOLLAR : '$';
AT : '@';
CHARACTERS : '"' ( '\\"' | . )*? '"';
FLOAT : ('0'..'9')+'.'('0'..'9')+;
INT : ('0'..'9')+;
PLUS : '+';
MINUS : '-';
STAR : '*';
SLASH : '/';
BACKSLASH : '\\';
EQUALS_EQUALS : '==';
BANG_EQUALS : '!=';
GREATER_THAN_EQUALS : '>=';
GREATER_THAN : '>';
LESS_THAN_EQUALS : '<=';
LESS_THAN : '<';
AMPERSAND_AMPERSAND : '&&';
PIPE_PIPE : '||';
BANG : '!';
AMPERSAND : '&';
PIPE : '|';
EQUALS : '=';
DOT : '.';
COMMA : ',';
DOUBLE_COLON : '::';
COLON : ':';
RIGHT_THIN_ARROW : '->';
RIGHT_THICK_ARROW : '=>';
SEMICOLON : ';';
LEFT_PARENTHESIS : '(';
RIGHT_PARENTHESIS : ')';
LEFT_BRACKET : '[';
RIGHT_BRACKET : ']';
LEFT_BRACE : '{';
RIGHT_BRACE : '}';
ACUTE : '`';



IGNORE : [ \t\r\n]+ -> skip;
